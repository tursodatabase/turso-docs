{
  "openapi": "3.0.1",
  "info": {
    "title": "Turso Platform API",
    "description": "API description here",
    "license": {
      "name": "MIT"
    },
    "version": "0.1.0"
  },
  "servers": [
    {
      "url": "https://api.turso.tech",
      "description": "Turso's Platform API"
    }
  ],
  "paths": {
    "/v1/organizations/{organizationName}/databases": {
      "get": {
        "summary": "List Databases",
        "description": "Returns a list of databases belonging to the organization or user.",
        "operationId": "listDatabases",
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationName"
          },
          {
            "name": "group",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Filter databases by group name."
          },
          {
            "name": "schema",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "The schema database name that can be used to get databases that belong to that parent schema."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "databases": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Database"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create Database",
        "description": "Creates a new database in a group for the organization or user.",
        "operationId": "createDatabase",
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationName"
          }
        ],
        "requestBody": {
          "description": "Database data to create a new database",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDatabaseInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "database": {
                      "$ref": "#/components/schemas/CreateDatabaseOutput",
                      "description": "The newly created database"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "The error message",
                      "example": "group not found"
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "The error message",
                      "example": "database with name [databaseName] already exists"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },

    "/v1/organizations/{organizationName}/databases/{databaseName}": {
      "get": {
        "summary": "Retrieve Database",
        "description": "Returns a database belonging to the organization or user.",
        "operationId": "getDatabase",
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationName"
          },
          {
            "$ref": "#/components/parameters/databaseName"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "database": {
                      "$ref": "#/components/schemas/Database"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/DatabaseNotFoundResponse"
          }
        }
      },

      "delete": {
        "summary": "Delete Database",
        "description": "Delete a database belonging to the organization or user.",
        "operationId": "deleteDatabase",
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationName"
          },
          {
            "$ref": "#/components/parameters/databaseName"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "database": {
                      "type": "string",
                      "description": "The name of the database that was deleted.",
                      "example": "my-db"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/DatabaseNotFoundResponse"
          }
        }
      }
    },

    "/v1/organizations/{organizationName}/databases/{databaseName}/configuration": {
      "get": {
        "summary": "Retrieve Database Configuration",
        "description": "Retrieve an individual database configuration belonging to the organization or user.",
        "operationId": "getDatabaseConfiguration",
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationName"
          },
          {
            "$ref": "#/components/parameters/databaseName"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DatabaseConfigurationResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Update Database Configuration",
        "description": "Update a database configuration belonging to the organization or user.",
        "operationId": "updateDatabaseConfiguration",
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationName"
          },
          {
            "$ref": "#/components/parameters/databaseName"
          }
        ],
        "requestBody": {
          "description": "The configuration to be applied to the chosen database.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DatabaseConfigurationInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DatabaseConfigurationResponse"
                }
              }
            }
          }
        }
      }
    },

    "/v1/organizations/{organizationName}/databases/dumps": {
      "parameters": [
        {
          "$ref": "#/components/parameters/organizationName"
        }
      ],
      "post": {
        "summary": "Upload SQLite Dump",
        "description": "Upload a SQL dump to be used when [creating a new database](/api-reference/databases/create) from seed.",
        "operationId": "uploadDatabaseDump",
        "requestBody": {
          "description": "Database dump file to be uploaded.",
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary",
                    "description": "Database dump file."
                  }
                },
                "required": ["file"]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful upload of the database dump.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "dump_url": {
                      "type": "string",
                      "format": "uri",
                      "description": "URL of the uploaded database dump."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },

    "/v1/organizations/{organizationName}/databases/{databaseName}/instances": {
      "get": {
        "summary": "List Database Instances",
        "description": "Returns a list of instances of a database. Instances are the individual primary or replica databases in each region defined by the group.",
        "operationId": "listDatabaseInstances",
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationName"
          },
          {
            "$ref": "#/components/parameters/databaseName"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "instances": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Instance"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },

    "/v1/organizations/{organizationName}/databases/{databaseName}/instances/{instanceName}": {
      "get": {
        "summary": "Retrieve Database Instance",
        "description": "Return the individual database instance by name.",
        "operationId": "getDatabaseInstance",
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationName"
          },
          {
            "$ref": "#/components/parameters/databaseName"
          },
          {
            "$ref": "#/components/parameters/instanceName"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "instance": {
                      "$ref": "#/components/schemas/Instance"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },

    "/v1/organizations/{organizationName}/databases/{databaseName}/auth/tokens": {
      "post": {
        "summary": "Generate Database Auth Token",
        "description": "Generates an authorization token for the specified database.",
        "operationId": "createDatabaseToken",
        "parameters": [
          { "$ref": "#/components/parameters/organizationName" },
          { "$ref": "#/components/parameters/databaseName" },
          {
            "name": "expiration",
            "in": "query",
            "schema": {
              "type": "string",
              "default": "never"
            },
            "description": "Expiration time for the token (e.g., 2w1d30m)."
          },
          {
            "name": "authorization",
            "in": "query",
            "schema": {
              "type": "string",
              "default": "full-access",
              "enum": ["full-access", "read-only"]
            },
            "description": "Authorization level for the token (full-access or read-only)."
          }
        ],
        "requestBody": {
          "description": "Additional context such as claims required for the token.",
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTokenInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "jwt": {
                      "type": "string",
                      "description": "The generated authorization token (JWT)."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "The error message",
                      "example": "Invalid expiration format"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/DatabaseNotFoundResponse"
          }
        }
      }
    },

    "/v1/organizations/{organizationName}/databases/{databaseName}/usage": {
      "get": {
        "summary": "Retrieve Database Usage",
        "description": "Fetch activity usage for a database in a given time period.",
        "operationId": "getDatabaseUsage",
        "parameters": [
          { "$ref": "#/components/parameters/organizationName" },
          { "$ref": "#/components/parameters/databaseName" },
          {
            "name": "from",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "The datetime to retrieve usage **from** in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format. Defaults to the current calendar month if not provided. Example: `2023-01-01T00:00:00Z`"
          },
          {
            "name": "to",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "The datetime to retrieve usage **to** in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format. Defaults to the current calendar month if not provided. Example: `2023-02-01T00:00:00Z`"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "database": {
                      "type": "object",
                      "description": "The database usage object, containg the total and individual instance usage for rows read and written, as well as the total storage size (in bytes).",
                      "$ref": "#/components/schemas/DatabaseUsageOutput"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "The error message",
                      "example": "invalid from parameter: parsing time \"2023-12-12T00:00:00\" as \"2006-01-02T15:04:05Z07:00\": cannot parse \"\" as \"Z07:00\""
                    }
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/DatabaseNotFoundResponse"
          }
        }
      }
    },

    "/v1/organizations/{organizationName}/databases/{databaseName}/stats": {
      "get": {
        "summary": "Retrieve Database Stats",
        "description": "Fetch the top queries of a database, including the count of rows read and written.",
        "operationId": "getDatabaseStats",
        "parameters": [
          { "$ref": "#/components/parameters/organizationName" },
          { "$ref": "#/components/parameters/databaseName" }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "top_queries": {
                      "type": "array",
                      "description": "The top queries performed on the given database as well as the total rows read and written.",
                      "items": {
                        "$ref": "#/components/schemas/DatabaseStatsOutput"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/DatabaseNotFoundResponse"
          }
        }
      }
    },

    "/v1/organizations/{organizationName}/databases/{databaseName}/auth/rotate": {
      "post": {
        "summary": "Invalidate All Database Auth Tokens",
        "description": "Invalidates all authorization tokens for the specified database.",
        "operationId": "invalidateDatabaseTokens",
        "parameters": [
          { "$ref": "#/components/parameters/organizationName" },
          { "$ref": "#/components/parameters/databaseName" }
        ],
        "responses": {
          "200": {
            "description": "Successful response (No Content)"
          },
          "404": {
            "$ref": "#/components/responses/DatabaseNotFoundResponse"
          }
        }
      }
    },

    "/v1/organizations/{organizationName}/groups": {
      "get": {
        "summary": "List Groups",
        "description": "Returns a list of groups belonging to the organization or user.",
        "operationId": "listGroups",
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationName"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "groups": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Group"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create Group",
        "description": "Creates a new group for the organization or user.",
        "operationId": "createGroup",
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationName"
          }
        ],
        "requestBody": {
          "description": "Group data to create a new group",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewGroup"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "group": {
                      "$ref": "#/components/schemas/Group",
                      "description": "The newly created group"
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "The error message",
                      "example": "group already exists"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },

    "/v1/organizations/{organizationName}/groups/{groupName}": {
      "get": {
        "summary": "Retrieve Group",
        "description": "Returns a group belonging to the organization or user.",
        "operationId": "getGroup",
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationName"
          },
          {
            "$ref": "#/components/parameters/groupName"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "group": {
                      "$ref": "#/components/schemas/Group"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/GroupNotFoundResponse"
          }
        }
      },
      "delete": {
        "summary": "Delete Group",
        "description": "Delete a group belonging to the organization or user.",
        "operationId": "deleteGroup",
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationName"
          },
          {
            "$ref": "#/components/parameters/groupName"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "group": {
                      "$ref": "#/components/schemas/Group"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/GroupNotFoundResponse"
          }
        }
      }
    },

    "/v1/organizations/{organizationName}/groups/{groupName}/transfer": {
      "post": {
        "summary": "Transfer Group",
        "description": "Transfer a group to another organization that you own or a member of.",
        "operationId": "transferGroup",
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationName"
          },
          {
            "$ref": "#/components/parameters/groupName"
          }
        ],
        "requestBody": {
          "description": "Receiving Organization details.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "organization": {
                    "type": "string",
                    "description": "The name of the organization to transfer the group to."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Group"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/GroupNotFoundResponse"
          }
        }
      }
    },

    "/v1/organizations/{organizationName}/groups/{groupName}/unarchive": {
      "post": {
        "summary": "Unarchive Group",
        "description": "Unarchive a group that has been archived due to inactivity.",
        "operationId": "transferGroup",
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationName"
          },
          {
            "$ref": "#/components/parameters/groupName"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "group": {
                      "$ref": "#/components/schemas/Group",
                      "description": "The group that was unarchived"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/GroupNotFoundResponse"
          }
        }
      }
    },

    "/v1/organizations/{organizationName}/groups/{groupName}/locations/{location}": {
      "post": {
        "summary": "Add Location to Group",
        "description": "Adds a location to the specified group.",
        "operationId": "addLocationToGroup",
        "parameters": [
          { "$ref": "#/components/parameters/organizationName" },
          { "$ref": "#/components/parameters/groupName" },
          {
            "name": "location",
            "in": "path",
            "required": true,
            "schema": { "type": "string" },
            "description": "The location code to add to the group.",
            "example": "ams"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "group": {
                      "$ref": "#/components/schemas/Group",
                      "description": "The group with the added location"
                    }
                  }
                },
                "example": {
                  "group": {
                    "archived": false,
                    "locations": ["lhr", "ams"],
                    "name": "default",
                    "primary": "lhr",
                    "uuid": "f1dec998-8f7f-11ee-907d-a2a821fd08b9"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "The error message",
                      "example": "invalid location: amss"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/GroupNotFoundResponse"
          }
        }
      },
      "delete": {
        "summary": "Remove Location from Group",
        "description": "Removes a location from the specified group.",
        "operationId": "removeLocationFromGroup",
        "parameters": [
          { "$ref": "#/components/parameters/organizationName" },
          { "$ref": "#/components/parameters/groupName" },
          {
            "name": "location",
            "in": "path",
            "required": true,
            "schema": { "type": "string" },
            "description": "The location code to remove from the group."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "group": {
                      "$ref": "#/components/schemas/Group",
                      "description": "The group with the removed location"
                    }
                  }
                },
                "example": {
                  "group": {
                    "archived": false,
                    "locations": ["lhr", "ams"],
                    "name": "default",
                    "primary": "lhr",
                    "uuid": "f1dec998-8f7f-11ee-907d-a2a821fd08b9"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "The error message",
                      "example": "Invalid location code"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/GroupNotFoundResponse"
          }
        }
      }
    },

    "/v1/organizations/{organizationName}/groups/{groupName}/update": {
      "post": {
        "summary": "Update Databases in a Group",
        "description": "Updates all databases in the group to the latest libSQL version.",
        "operationId": "updateGroupDatabases",
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationName"
          },
          {
            "$ref": "#/components/parameters/groupName"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response (No Content)"
          },
          "404": {
            "$ref": "#/components/responses/GroupNotFoundResponse"
          }
        }
      }
    },

    "/v1/organizations/{organizationName}/groups/{groupName}/auth/tokens": {
      "post": {
        "summary": "Create Group Auth Token",
        "description": "Generates an authorization token for the specified group.",
        "operationId": "createGroupToken",
        "parameters": [
          { "$ref": "#/components/parameters/organizationName" },
          { "$ref": "#/components/parameters/groupName" },
          {
            "name": "expiration",
            "in": "query",
            "schema": {
              "type": "string",
              "default": "never"
            },
            "description": "Expiration time for the token (e.g., 2w1d30m)."
          },
          {
            "name": "authorization",
            "in": "query",
            "schema": {
              "type": "string",
              "default": "full-access",
              "enum": ["full-access", "read-only"]
            },
            "description": "Authorization level for the token (full-access or read-only)."
          }
        ],
        "requestBody": {
          "description": "Additional context such as claims required for the token.",
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTokenInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "jwt": {
                      "type": "string",
                      "description": "The generated authorization token (JWT)."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "The error message",
                      "example": "Invalid expiration format"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/GroupNotFoundResponse"
          }
        }
      }
    },

    "/v1/organizations/{organizationName}/groups/{groupName}/auth/rotate": {
      "post": {
        "summary": "Invalidate All Group Auth Tokens",
        "description": "Invalidates all authorization tokens for the specified group.",
        "operationId": "invalidateGroupTokens",
        "parameters": [
          { "$ref": "#/components/parameters/organizationName" },
          { "$ref": "#/components/parameters/groupName" }
        ],
        "responses": {
          "200": {
            "description": "Successful response (No Content)"
          },
          "404": {
            "$ref": "#/components/responses/GroupNotFoundResponse"
          }
        }
      }
    },

    "/v1/locations": {
      "get": {
        "summary": "List Locations",
        "description": "Returns a list of locations where you can create or replicate databases.",
        "operationId": "listLocations",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "locations": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      },
                      "description": "A mapping of location codes to location names."
                    }
                  },
                  "example": {
                    "locations": {
                      "ams": "Amsterdam, Netherlands",
                      "arn": "Stockholm, Sweden",
                      "atl": "Atlanta, Georgia (US)",
                      "bog": "Bogotá, Colombia",
                      "bom": "Mumbai, India",
                      "bos": "Boston, Massachusetts (US)",
                      "cdg": "Paris, France",
                      "den": "Denver, Colorado (US)",
                      "dfw": "Dallas, Texas (US)",
                      "ewr": "Secaucus, NJ (US)",
                      "eze": "Ezeiza, Argentina",
                      "fra": "Frankfurt, Germany",
                      "gdl": "Guadalajara, Mexico",
                      "gig": "Rio de Janeiro, Brazil",
                      "gru": "São Paulo, Brazil",
                      "hkg": "Hong Kong, Hong Kong",
                      "iad": "Ashburn, Virginia (US)",
                      "jnb": "Johannesburg, South Africa",
                      "lax": "Los Angeles, California (US)",
                      "lhr": "London, United Kingdom",
                      "mad": "Madrid, Spain",
                      "mia": "Miami, Florida (US)",
                      "nrt": "Tokyo, Japan",
                      "ord": "Chicago, Illinois (US)",
                      "otp": "Bucharest, Romania",
                      "phx": "Phoenix, Arizona (US)",
                      "qro": "Querétaro, Mexico",
                      "scl": "Santiago, Chile",
                      "sea": "Seattle, Washington (US)",
                      "sin": "Singapore, Singapore",
                      "sjc": "San Jose, California (US)",
                      "syd": "Sydney, Australia",
                      "waw": "Warsaw, Poland",
                      "yul": "Montreal, Canada",
                      "yyz": "Toronto, Canada"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },

    "/v1/organizations": {
      "get": {
        "summary": "List Organizations",
        "description": "Returns a list of organizations the authenticated user owns or is a member of.",
        "operationId": "listOrganizations",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Organization"
                  }
                }
              }
            }
          }
        }
      }
    },

    "/v1/organizations/{organizationName}": {
      "patch": {
        "summary": "Update Organization",
        "description": "Update an organization you own or are a member of.",
        "operationId": "updateOrganization",
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationName"
          }
        ],
        "requestBody": {
          "description": "The updated organization details.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "overages": {
                    "type": "boolean",
                    "description": "Enable or disable overages for the organization."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "organization": {
                      "description": "The updated organization.",
                      "$ref": "#/components/schemas/Organization"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },

    "/v1/organizations/{organizationName}/plans": {
      "get": {
        "summary": "List Plans",
        "description": "Returns a list of available plans and their quotas.",
        "operationId": "listOrganizationPlans",
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationName"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "The name of the plan.",
                      "example": "starter"
                    },
                    "price": {
                      "type": "string",
                      "description": "The monthly price of the plan.",
                      "example": "0"
                    },
                    "quotas": {
                      "$ref": "#/components/schemas/PlanQuotas"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },

    "/v1/organizations/{organizationName}/invoices": {
      "get": {
        "summary": "List Invoices",
        "description": "Returns a list of invoices for the organization.",
        "operationId": "listOrganizationInvoices",
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationName"
          },
          {
            "name": "type",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": ["all", "upcoming", "issued"]
            },
            "description": "The type of invoice to retrieve."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "invoices": {
                      "type": "array",
                      "description": "The list of invoices for the organization.",

                      "items": {
                        "type": "object",
                        "properties": {
                          "invoice_number": {
                            "type": "string",
                            "description": "The unique ID for the invoice.",
                            "example": "LFONTK-00001"
                          },
                          "amount_due": {
                            "type": "string",
                            "description": "The formatted price in USD for the invoice.",
                            "example": "10.29"
                          },
                          "due_date": {
                            "type": "string",
                            "description": "The due date for the invoice.",
                            "example": "2024-01-01T05:00:00+00:00"
                          },
                          "paid_at": {
                            "type": "string",
                            "description": "The date the invoice was paid.",
                            "example": "2024-01-01T05:00:00+00:00"
                          },
                          "payment_failed_at": {
                            "type": "string",
                            "description": "The date the invoice payment last failed.",
                            "example": "2024-01-01T05:00:00+00:00"
                          },
                          "invoice_pdf": {
                            "type": "string",
                            "description": "The link to the invoice PDF you can download.",
                            "example": "https://assets.withorb.com/invoice/..."
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },

    "/v1/organizations/{organizationName}/subscription": {
      "get": {
        "summary": "Current Subscription",
        "description": "Returns the current subscription details for the organization.",
        "operationId": "getOrganizationSubscription",
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationName"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "subscription": {
                      "type": "string",
                      "description": "The name of the plan for the current subscription.",
                      "example": "scaler"
                    },
                    "overages": {
                      "type": "boolean",
                      "description": "Whether overages are enabled for the organization."
                    },
                    "plan": {
                      "type": "string",
                      "description": "The name of the plan for the current subscription.",
                      "example": "scaler"
                    },
                    "timeline": {
                      "type": "string",
                      "description": "Whether the plan is billed monthly or yearly.",
                      "example": "monthly"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },

    "/v1/organizations/{organizationName}/usage": {
      "get": {
        "summary": "Organization Usage",
        "description": "Fetch current billing cycle usage for an organization.",
        "operationId": "getOrganizationUsage",
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationName"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "organization": {
                      "type": "object",
                      "description": "The organization usage object, containing the total usage for rows read and written, as well as the total storage size (in bytes).",
                      "properties": {
                        "uuid": {
                          "type": "string",
                          "description": "The UUID of the organization.",
                          "example": "fa72ba58-7db3-436b-bcab-14b83eb1dd88"
                        },
                        "usage": {
                          "type": "object",
                          "description": "The usage object for the organization.",
                          "properties": {
                            "rows_read": {
                              "type": "integer",
                              "description": "The number of rows read allowed for the specific plan.",
                              "example": 1000000000
                            },
                            "rows_written": {
                              "type": "integer",
                              "description": "The number of rows written allowed for the specific plan.",
                              "example": 25000000
                            },
                            "databases": {
                              "type": "integer",
                              "description": "The number of databases allowed for the specific plan.",
                              "example": 500
                            },
                            "locations": {
                              "type": "integer",
                              "description": "The number of locations allowed for the specific plan.",
                              "example": 3
                            },
                            "storage": {
                              "type": "integer",
                              "description": "The amount of storage allowed for the specific plan, in bytes.",
                              "example": 9000000000
                            },
                            "groups": {
                              "type": "integer",
                              "description": "The number of groups allowed for the specific plan.",
                              "example": 1
                            },
                            "bytes_synced": {
                              "type": "integer",
                              "description": "The number of bytes synced allowed for the specific plan, in bytes.",
                              "example": 3000000000
                            }
                          }
                        },
                        "databases": {
                          "type": "array",
                          "description": "The databases for the organization and their usage.",
                          "items": {
                            "$ref": "#/components/schemas/DatabaseUsageOutput"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },

    "/v1/organizations/{organizationName}/members": {
      "get": {
        "summary": "List Members",
        "description": "Returns a list of members part of the organization.",
        "operationId": "listOrganizationMembers",
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationName"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "members": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Member"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Add Member",
        "description": "Add an existing Turso user to an organization.",
        "operationId": "addOrganizationMember",
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationName"
          }
        ],
        "requestBody": {
          "description": "The member you want to add.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "username": {
                    "type": "string",
                    "description": "The username of an existing Turso user."
                  },
                  "role": {
                    "type": "string",
                    "enum": ["admin", "member"],
                    "description": "The role given to the user.",
                    "default": "member"
                  }
                },
                "required": ["email"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "member": {
                      "$ref": "#/components/schemas/Member/properties/username"
                    },
                    "role": {
                      "$ref": "#/components/schemas/Member/properties/role"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Member not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "The error message",
                      "example": "could not find user [username]"
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "The error message",
                      "example": "user [username] is already a member of organization [organizationName]"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },

    "/v1/organizations/{organizationName}/members/{username}": {
      "delete": {
        "summary": "Remove Member",
        "description": "Remove a user from the organization by username.",
        "operationId": "removeOrganizationMember",
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationName"
          },
          {
            "$ref": "#/components/parameters/username"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "member": {
                      "$ref": "#/components/schemas/Member/properties/username"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Member not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "The error message",
                      "example": "user [username] is not a member of org [organizationName]"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },

    "/v1/organizations/{organizationName}/invites": {
      "get": {
        "summary": "List Invites",
        "description": "Returns a list of invites for the organization.",
        "operationId": "listOrganizationInvites",
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationName"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "invites": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Invite"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Invite Organization Member",
        "description": "Invite a user (who isn't already a Turso user) to an organization.",
        "operationId": "inviteOrganizationMember",
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationName"
          }
        ],
        "requestBody": {
          "description": "The user you want to invite to join Turso, and your organization.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "description": "The email of the user you want to invite."
                  },
                  "role": {
                    "type": "string",
                    "enum": ["admin", "member"],
                    "description": "The role given to the user.",
                    "default": "member"
                  }
                },
                "required": ["email"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "invited": {
                      "$ref": "#/components/schemas/Invite"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },

    "/v1/organizations/{organizationName}/invites/{email}": {
      "delete": {
        "summary": "Delete Invite",
        "description": "Delete an invite for the organization by email.",
        "operationId": "deleteOrganizationInviteByEmail",
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationName"
          },
          {
            "in": "path",
            "name": "email",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The email of the user invited.",
              "example": "iku@turso.tech"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response (No Content)"
          },
          "404": {
            "description": "Invite not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "The error code"
                    },
                    "error": {
                      "type": "string",
                      "description": "The error message (human readable)",
                      "example": "invite not found"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },

    "/v1/auth/validate": {
      "get": {
        "summary": "Validate API Token",
        "description": "Validates an API token belonging to a user.",
        "operationId": "validateAPIToken",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "exp": {
                      "type": "integer",
                      "description": "The time of expiration for the provided token in unix epoch seconds, or `-1` if there is no expiration.",
                      "example": 999
                    }
                  }
                }
              }
            }
          }
        }
      }
    },

    "/v1/auth/api-tokens": {
      "get": {
        "summary": "List API Tokens",
        "description": "Returns a list of API tokens belonging to a user.",
        "operationId": "listAPITokens",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "tokens": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/APIToken"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/auth/api-tokens/{tokenName}": {
      "post": {
        "summary": "Create API Token",
        "description": "Returns a new API token belonging to a user.",
        "operationId": "createAPIToken",
        "parameters": [
          {
            "$ref": "#/components/parameters/tokenName"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "name": {
                      "$ref": "#/components/schemas/APIToken/properties/name"
                    },
                    "id": {
                      "$ref": "#/components/schemas/APIToken/properties/id"
                    },
                    "token": {
                      "type": "string",
                      "description": "The actual token contents as a JWT. This is used with the `Bearer` header, see [Authentication](/authentication) for more details. **This token is never revealed again.**",
                      "example": "..."
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Revoke API Token",
        "description": "Revokes the provided API token belonging to a user.",
        "operationId": "revokeAPIToken",
        "parameters": [
          {
            "$ref": "#/components/parameters/tokenName"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "token": {
                      "type": "string",
                      "description": "The revoked token name.",
                      "example": "..."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },

    "/v1/organizations/{organizationName}/audit-logs": {
      "get": {
        "summary": "List Audit Logs",
        "description": "Return the audit logs for the given organization, ordered by the `created_at` field in descending order.",
        "operationId": "listOrganizationAuditLogs",
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationName"
          },
          {
            "$ref": "#/components/parameters/page_size"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "audit_logs": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/AuditLog"
                      }
                    },
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "page": {
                          "type": "integer",
                          "description": "The current page number.",
                          "example": 1
                        },
                        "page_size": {
                          "type": "integer",
                          "description": "The number of items per page.",
                          "example": 10
                        },
                        "total_pages": {
                          "type": "integer",
                          "description": "The total number of pages.",
                          "example": 1
                        },
                        "total_rows": {
                          "type": "integer",
                          "description": "The total number of items.",
                          "example": 1
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },

  "components": {
    "schemas": {
      "Extensions": {
        "oneOf": [
          {
            "type": "string",
            "enum": ["all"],
            "description": "Set to `all` to enable all extensions."
          },
          {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "vector",
                "crypto",
                "fuzzy",
                "math",
                "stats",
                "text",
                "unicode",
                "uuid",
                "regexp",
                "vec"
              ]
            },
            "description": "Array of extensions to enable."
          }
        ],
        "description": "The extensions to enable for new databases created in this group. Users looking to enable vector extensions should instead use the native [libSQL vector datatype](/features/ai-and-embeddings)."
      },

      "Organization": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The organization name. Every user has a `personal` organization for their own account.",
            "example": "personal"
          },
          "slug": {
            "type": "string",
            "description": "The organization slug. This will be your username for `personal` accounts.",
            "example": "iku"
          },
          "type": {
            "type": "string",
            "description": "The type of account this organization is. Will always be `personal` or `team`.",
            "example": "personal",
            "enum": ["personal", "team"]
          },
          "overages": {
            "type": "boolean",
            "description": "The name of the organization. Every user has a `personal` organization for their own account.",
            "example": false
          },
          "blocked_reads": {
            "type": "boolean",
            "description": "Returns the current status for blocked reads.",
            "example": false
          },
          "blocked_writes": {
            "type": "boolean",
            "description": "Returns the current status for blocked writes.",
            "example": false
          }
        }
      },
      "Member": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "description": "The username for the member.",
            "example": "iku"
          },
          "role": {
            "type": "string",
            "description": "The role assigned to the member. Will be `owner`, `admin` or `member`.",
            "example": "owner",
            "enum": ["owner", "admin", "member"]
          },
          "email": {
            "type": "string",
            "description": "The email for the member.",
            "example": "iku@turso.tech"
          }
        }
      },

      "Invite": {
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer",
            "description": "The unique ID for the invite.",
            "example": 1
          },
          "CreatedAt": {
            "type": "string",
            "description": "The datetime the invite was created in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format. Example: `2023-01-01T00:00:00Z`",
            "example": "2023-01-01T00:00:00Z"
          },
          "UpdatedAt": {
            "type": "string",
            "description": "The datetime the invite was updated in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format. Example: `2023-01-01T00:00:00Z`",
            "example": "2023-01-01T00:00:00Z"
          },
          "DeletedAt": {
            "type": "string",
            "description": "The datetime the invite was deleted (or revoked) in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format. Example: `2023-01-01T00:00:00Z`",
            "example": "2023-01-01T00:00:00Z"
          },
          "Role": {
            "type": "string",
            "enum": ["admin", "member"],
            "description": "The assigned role for the invited user.",
            "example": "member"
          },
          "Email": {
            "type": "string",
            "description": "The email of the person invited.",
            "example": "iku@turso.tech"
          },
          "OrganizationID": {
            "type": "integer",
            "description": "The ID of the organization the user was invited to.",
            "example": 1
          },
          "Token": {
            "type": "string",
            "description": "The unique token used to verify the invite.",
            "example": "3e393245b91b41ebad0980bc98349c9d"
          },
          "Organization": {
            "$ref": "#/components/schemas/Organization",
            "example": {
              "name": "turso",
              "slug": "turso",
              "type": "team",
              "overages": false,
              "blocked_reads": false,
              "blocked_writes": false
            }
          },
          "Accepted": {
            "type": "boolean",
            "description": "The current status of the invite.",
            "example": false
          }
        }
      },

      "APIToken": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name given to the API Token.",
            "example": "my-token"
          },
          "id": {
            "type": "string",
            "description": "The ID generated by Turso for the API Token.",
            "example": "clGFZ4STEe6fljpFzIum8A"
          }
        }
      },

      "AuditLog": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "The code associated to the action taken.",
            "example": "db-create",
            "enum": [
              "user-signup",
              "db-create",
              "db-delete",
              "instance-create",
              "instance-delete",
              "org-create",
              "org-delete",
              "org-member-add",
              "org-member-rm",
              "org-member-leave",
              "org-plan-update",
              "org-set-overages",
              "group-create",
              "group-delete",
              "mfa-enable",
              "mfa-disable"
            ]
          },
          "message": {
            "type": "string",
            "description": "Additional context from the performed action.",
            "example": ""
          },
          "origin": {
            "type": "string",
            "description": "Where this action was performed. Will be either `cli` or `web` depending on the `User-Agent` sent to the API.",
            "example": "cli"
          },
          "author": {
            "type": "string",
            "description": "The username of the user who performed the action.",
            "example": "iku"
          },
          "created_at": {
            "type": "string",
            "description": "A formatted [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp this action was performed.",
            "example": "2023-12-20T09:46:08Z"
          },
          "data": {
            "type": "object",
            "description": "The payload of the action performed."
          }
        }
      },

      "Database": {
        "type": "object",
        "properties": {
          "Name": {
            "type": "string",
            "description": "The database name, **unique** across your organization.",
            "example": "my-db"
          },
          "DbId": {
            "type": "string",
            "description": "The database universal unique identifier (UUID).",
            "example": "0eb771dd-6906-11ee-8553-eaa7715aeaf2"
          },
          "Hostname": {
            "type": "string",
            "description": "The DNS hostname used for client libSQL and HTTP connections.",
            "example": "[databaseName]-[organizationName].turso.io"
          },
          "block_reads": {
            "type": "boolean",
            "description": "The current status for blocked reads.",
            "example": false
          },
          "block_writes": {
            "type": "boolean",
            "description": "The current status for blocked writes.",
            "example": false
          },
          "allow_attach": {
            "type": "boolean",
            "description": "The current status for allowing the database to be attached to another.",
            "example": false
          },
          "regions": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "A list of regions for the group the database belongs to.",
            "example": ["lhr", "bos", "nrt"]
          },
          "primaryRegion": {
            "type": "string",
            "description": "The primary region location code the group the database belongs to.",
            "example": "lhr"
          },
          "type": {
            "type": "string",
            "description": "The string representing the object type.",
            "default": "logical",
            "example": "logical"
          },
          "version": {
            "type": "string",
            "description": "The current libSQL version the database is running.",
            "example": "0.22.22"
          },
          "group": {
            "type": "string",
            "description": "The name of the group the database belongs to.",
            "example": "default"
          },
          "is_schema": {
            "type": "boolean",
            "description": "If this database controls other child databases then this will be `true`. See [Multi-DB Schemas](/features/multi-db-schemas).",
            "example": false
          },
          "schema": {
            "type": "string",
            "description": "The name of the parent database that owns the schema for this database. See [Multi-DB Schemas](/features/multi-db-schemas).",
            "example": ""
          },
          "archived": {
            "type": "boolean",
            "description": "The current status of the database. If `true`, the database is archived and requires a manual unarchive step.",
            "example": false
          }
        }
      },

      "Instance": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "description": "The instance universal unique identifier (UUID).",
            "example": "0be90471-6906-11ee-8553-eaa7715aeaf2"
          },
          "name": {
            "type": "string",
            "description": "The name of the instance (location code).",
            "example": "lhr"
          },
          "type": {
            "type": "string",
            "description": "The type of database instance this, will be `primary` or `replica`.",
            "enum": ["primary", "replica"],
            "example": "primary"
          },
          "region": {
            "type": "string",
            "description": "The location code for the region this instance is located.",
            "example": "lhr"
          },
          "hostname": {
            "type": "string",
            "description": "The DNS hostname used for client libSQL and HTTP connections (specific to this instance only).",
            "example": "[databaseName]-[organizationName].turso.io"
          }
        }
      },

      "CreateDatabaseInput": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the new database. Must contain only lowercase letters, numbers, dashes. No longer than 64 characters."
          },
          "group": {
            "type": "string",
            "description": "The name of the group where the database should be created. **The group must already exist.**"
          },
          "seed": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": ["database", "dump"],
                "description": "The type of seed to be used to create a new database.",
                "example": "database"
              },
              "name": {
                "type": "string",
                "description": "The name of the existing database when `database` is used as a seed type.",
                "example": "my-db"
              },
              "url": {
                "type": "string",
                "description": "The URL returned by [upload dump](/api-reference/databases/upload-dump) can be used with the `dump` seed type.",
                "example": "https://api.turso.tech/v1/{organizationName}/databases/dumps/{dumpId}"
              },
              "timestamp": {
                "type": "string",
                "description": "A formatted [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) recovery point to create a database from. This must be within the last 24 hours, or 30 days on the scaler plan.",
                "example": "2023-12-20T09:46:08Z"
              }
            }
          },
          "size_limit": {
            "type": "string",
            "description": "The maximum size of the database in bytes. Values with units are also accepted, e.g. 1mb, 256mb, 1gb."
          },
          "is_schema": {
            "type": "boolean",
            "description": "Mark this database as the parent schema database that updates child databases with any schema changes. See [Multi-DB Schemas](/features/multi-db-schemas).",
            "example": true
          },
          "schema": {
            "type": "string",
            "description": "The name of the parent database to use as the schema. See [Multi-DB Schemas](/features/multi-db-schemas).",
            "example": "my-parent-db"
          }
        },
        "required": ["name", "group"]
      },

      "CreateDatabaseOutput": {
        "type": "object",
        "properties": {
          "DbId": {
            "$ref": "#/components/schemas/Database/properties/DbId"
          },
          "Hostname": {
            "$ref": "#/components/schemas/Database/properties/Hostname"
          },
          "Name": {
            "$ref": "#/components/schemas/Database/properties/Name"
          }
        }
      },

      "DatabaseStatsOutput": {
        "type": "object",
        "properties": {
          "query": {
            "type": "string",
            "description": "A string representing the SQL query executed.",
            "example": "SELECT COUNT(*), CustomerID FROM Orders GROUP BY CustomerID HAVING COUNT(*) > 5;"
          },
          "rows_read": {
            "type": "integer",
            "description": "An integer indicating the number of rows read by the query, which reflects the volume of data the query processed from the database.",
            "example": 123
          },
          "rows_written": {
            "type": "integer",
            "description": "An integer indicating the number of rows written (inserted, updated, or deleted) by the query, which reflects the impact of the query on the database data.",
            "example": 4567
          }
        }
      },

      "DatabaseUsageOutput": {
        "type": "object",
        "properties": {
          "uuid": {
            "$ref": "#/components/schemas/Database/properties/DbId"
          },
          "instances": {
            "type": "array",
            "description": "The usage objects for instances of the current database.",
            "items": {
              "type": "object",
              "properties": {
                "uuid": {
                  "type": "string",
                  "description": "The instance universal unique identifier (UUID).",
                  "example": "cd831986-94e5-11ee-a6fe-7a52e1f7759a"
                },
                "usage": {
                  "description": "The usage for the current database instance.",
                  "$ref": "#/components/schemas/DatabaseUsageObject"
                }
              }
            },
            "example": [
              {
                "uuid": "cd831986-94e5-11ee-a6fe-7a52e1f7759a",
                "usage": {
                  "rows_read": 0,
                  "rows_written": 0,
                  "storage_bytes": 4096
                }
              },
              {
                "uuid": "0be90471-6906-11ee-8553-eaa7715aeaf2",
                "usage": {
                  "rows_read": 0,
                  "rows_written": 0,
                  "storage_bytes": 4096
                }
              }
            ]
          },
          "total": {
            "description": "The total usage for the database.",
            "$ref": "#/components/schemas/DatabaseUsageObject",
            "example": {
              "rows_read": 0,
              "rows_written": 0,
              "storage_bytes": 8192
            }
          }
        }
      },

      "DatabaseUsageObject": {
        "type": "object",
        "properties": {
          "rows_read": {
            "type": "integer",
            "example": 0,
            "description": "The total rows read in the time period."
          },
          "rows_written": {
            "type": "integer",
            "example": 0,
            "description": "The total rows written in the time period."
          },
          "storage_bytes": {
            "type": "integer",
            "example": 0,
            "description": "The total storage used."
          }
        }
      },

      "CreateTokenInput": {
        "type": "object",
        "properties": {
          "permissions": {
            "type": "object",
            "description": "The permissions for the token.",
            "properties": {
              "read_attach": {
                "type": "object",
                "description": "Read `ATTACH` permission for the token.",
                "properties": {
                  "databases": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      },

      "DatabaseConfigurationInput": {
        "type": "object",
        "properties": {
          "size_limit": {
            "type": "string",
            "description": "The maximum size of the database in bytes. Values with units are also accepted, e.g. 1mb, 256mb, 1gb."
          },
          "allow_attach": {
            "type": "boolean",
            "description": "Allow or disallow attaching databases to the current database."
          },
          "block_reads": {
            "type": "boolean",
            "description": "Block all database reads.",
            "example": false
          },
          "block_writes": {
            "type": "boolean",
            "description": "Block all database writes.",
            "example": false
          }
        }
      },
      "DatabaseConfigurationResponse": {
        "type": "object",
        "properties": {
          "size_limit": {
            "type": "string",
            "description": "The maximum size of the database in bytes. Values with units are also accepted, e.g. 1mb, 256mb, 1gb.",
            "example": "10000"
          },
          "allow_attach": {
            "type": "boolean",
            "description": "Allow or disallow attaching databases to the current database.",
            "example": true
          },
          "block_reads": {
            "type": "boolean",
            "description": "The current status for blocked reads.",
            "example": false
          },
          "block_writes": {
            "type": "boolean",
            "description": "The current status for blocked writes.",
            "example": false
          }
        }
      },

      "BaseGroup": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The group name, unique across your organization.",
            "example": "default"
          },
          "version": {
            "type": "string",
            "description": "The current libSQL server version the databases in that group are running.",
            "example": "v0.23.7"
          },
          "uuid": {
            "type": "string",
            "description": "The group universal unique identifier (UUID).",
            "example": "0a28102d-6906-11ee-8553-eaa7715aeaf2"
          },
          "locations": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "An array of location keys the group is located.",
            "example": ["lhr", "ams", "bos"]
          },
          "primary": {
            "type": "string",
            "description": "The primary location key.",
            "example": "lhr"
          },
          "archived": {
            "type": "boolean",
            "description": "Groups on the free tier get archived after some inactivity.",
            "example": false
          }
        }
      },

      "PlanQuotas": {
        "type": "object",
        "properties": {
          "rowsRead": {
            "type": "integer",
            "description": "The number of rows read allowed for the specific plan.",
            "example": 1000000000
          },
          "rowsWritten": {
            "type": "integer",
            "description": "The number of rows written allowed for the specific plan.",
            "example": 25000000
          },
          "databases": {
            "type": "integer",
            "description": "The number of databases allowed for the specific plan.",
            "example": 500
          },
          "locations": {
            "type": "integer",
            "description": "The number of locations allowed for the specific plan.",
            "example": 3
          },
          "storage": {
            "type": "integer",
            "description": "The amount of storage allowed for the specific plan, in bytes.",
            "example": 9000000000
          },
          "groups": {
            "type": "integer",
            "description": "The number of groups allowed for the specific plan.",
            "example": 1
          },
          "bytesSynced": {
            "type": "integer",
            "description": "The number of bytes synced allowed for the specific plan, in bytes.",
            "example": 3000000000
          }
        }
      },

      "NewGroup": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the new group."
          },
          "location": {
            "type": "string",
            "description": "The location key for the new group."
          },
          "extensions": {
            "$ref": "#/components/schemas/Extensions"
          }
        },
        "required": ["name", "location"],
        "example": {
          "name": "new-group",
          "location": "lhr"
        }
      },
      "Group": {
        "allOf": [
          { "$ref": "#/components/schemas/BaseGroup" },
          {
            "type": "object"
          }
        ]
      }
    },
    "responses": {
      "GroupNotFoundResponse": {
        "description": "Group not found",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "description": "The error message",
                  "example": "group not found"
                }
              }
            }
          }
        }
      },
      "DatabaseNotFoundResponse": {
        "description": "Database not found",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "description": "The error message",
                  "example": "could not find database with name [databaseName]: record not found"
                }
              }
            }
          }
        }
      }
    },
    "parameters": {
      "organizationName": {
        "in": "path",
        "name": "organizationName",
        "required": true,
        "schema": {
          "type": "string"
        },
        "description": "The name of the organization or user."
      },
      "groupName": {
        "name": "groupName",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string"
        },
        "description": "The name of the group."
      },
      "databaseName": {
        "name": "databaseName",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string"
        },
        "description": "The name of the database."
      },
      "instanceName": {
        "name": "instanceName",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string"
        },
        "description": "The name of the instance (location code)."
      },
      "tokenName": {
        "name": "tokenName",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string"
        },
        "description": "The name of the api token."
      },
      "username": {
        "name": "username",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string"
        },
        "description": "The username of a Turso user or organization member."
      },
      "page_size": {
        "in": "query",
        "name": "page_size",
        "required": false,
        "schema": {
          "type": "integer"
        },
        "description": "The limit of items to return per page. Defaults to 100."
      },
      "page": {
        "in": "query",
        "name": "page",
        "required": false,
        "schema": {
          "type": "integer"
        },
        "description": "The page number to return. Defaults to 1."
      }
    }
  }
}
